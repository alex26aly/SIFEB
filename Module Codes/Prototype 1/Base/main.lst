CCS PCH C Compiler, Version 5.008, 5967               03-Sep-14 16:39

               Filename:   G:\sem7\Final Year Project\Programs\GIT\SIFEB\Module Codes\Prototype 1\Base\main.lst

               ROM used:   698 bytes (2%)
                           Largest free fragment is 32066
               RAM used:   28 (2%) at main() level
                           31 (2%) worst case
               Stack used: 4 locations (1 in main + 3 for interrupts)
               Stack size: 31

*
0000:  GOTO   0230
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.3
004A:  GOTO   0054
004E:  BTFSC  F9E.3
0050:  GOTO   019C
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
*
00AE:  CLRF   FEA
00B0:  MOVLW  1E
00B2:  MOVWF  FE9
00B4:  MOVF   FEF,W
00B6:  BZ    00D4
00B8:  MOVLW  01
00BA:  MOVWF  01
00BC:  CLRF   00
00BE:  DECFSZ 00,F
00C0:  BRA    00BE
00C2:  DECFSZ 01,F
00C4:  BRA    00BC
00C6:  MOVLW  4A
00C8:  MOVWF  00
00CA:  DECFSZ 00,F
00CC:  BRA    00CA
00CE:  BRA    00D0
00D0:  DECFSZ FEF,F
00D2:  BRA    00B8
00D4:  RETURN 0
.................... #use FIXED_IO( B_outputs=PIN_B4,PIN_B3,PIN_B2,PIN_B1,PIN_B0 ) 
.................... #use i2c(Slave,Slow,sda=PIN_C4,scl=PIN_C3,force_hw,address=0x14) 
*
0096:  MOVF   FC9,W
0098:  MOVFF  1D,FC9
009C:  BSF    FC6.4
009E:  BCF    F9E.3
00A0:  BTFSC  FC7.0
00A2:  BRA    00A0
00A4:  CLRF   01
00A6:  BTFSC  FC6.4
00A8:  INCF   01,F
00AA:  GOTO   01CC (RETURN)
....................  
....................  
....................  
.................... /* 
....................  
....................    Left motor : 
....................    ccp2 
....................    forward : B0=0   B1=1 
....................    reverse : B0=1   B1=0 
....................     
....................    Right motor : 
....................    ccp1 
....................    forward : B2=1   B3=0 
....................    reverse : B2=0   B3=1 
....................     
....................    LED connected to B4 
....................     
....................    s - show, t - test, a - act 
.................... */ 
....................  
.................... #define MotorRight1 PIN_B2 
.................... #define MotorRight2 PIN_B3 
.................... #define MotorLeft1 PIN_B0 
.................... #define MotorLeft2 PIN_B1 
.................... #define LED PIN_B4 
....................  
.................... void go_forward();   //action 1 
.................... void go_backward();  //action 2 
.................... void turn_right();   //action 3 
.................... void turn_left();    //action 4 
.................... void stop();         //action 5 
.................... void show();  
....................  
.................... char buffer[2]; 
.................... int8 state;  
....................  
.................... #INT_SSP 
.................... void  SSP_isr(void)  
.................... { 
....................       state = i2c_isr_state(); 
*
019C:  BTFSC  FC7.5
019E:  BRA    01A6
01A0:  CLRF   1A
01A2:  BTFSC  FC7.2
01A4:  BSF    1A.7
01A6:  MOVF   1A,W
01A8:  INCF   1A,F
01AA:  MOVWF  19
....................  
....................       if((state== 0 ) || (state== 0x80)){ 
01AC:  MOVF   19,F
01AE:  BZ    01B6
01B0:  MOVF   19,W
01B2:  SUBLW  80
01B4:  BNZ   01C0
....................         i2c_read(); 
01B6:  BCF    FC6.6
01B8:  BTFSS  F9E.3
01BA:  BRA    01B8
01BC:  MOVF   FC9,W
01BE:  BSF    FC6.4
....................       } 
....................  
....................       if(state >= 0x80){ 
01C0:  MOVF   19,W
01C2:  SUBLW  7F
01C4:  BC    01CE
....................          i2c_write(buffer[0]); 
01C6:  MOVFF  17,1D
01CA:  BRA    0096
....................       } 
01CC:  BRA    022A
....................  
....................       else if(state > 0){ 
01CE:  MOVF   19,F
01D0:  BZ    022A
....................          buffer[state - 1] = i2c_read(); 
01D2:  MOVLW  01
01D4:  SUBWF  19,W
01D6:  CLRF   03
01D8:  ADDLW  17
01DA:  MOVWF  FE9
01DC:  MOVLW  00
01DE:  ADDWFC 03,W
01E0:  MOVWF  FEA
01E2:  BCF    FC6.6
01E4:  BTFSS  F9E.3
01E6:  BRA    01E4
01E8:  MOVF   FC9,W
01EA:  BSF    FC6.4
01EC:  MOVWF  FEF
....................           
....................          if(buffer[0] == 's'){ 
01EE:  MOVF   17,W
01F0:  SUBLW  73
01F2:  BNZ   01F8
....................             show(); 
01F4:  BRA    00D6
....................          } 
01F6:  BRA    022A
....................           
....................          else if(state == 2){ 
01F8:  MOVF   19,W
01FA:  SUBLW  02
01FC:  BNZ   022A
....................             switch(buffer[1])  
01FE:  MOVF   18,W
0200:  XORLW  01
0202:  BZ    0216
0204:  XORLW  03
0206:  BZ    021A
0208:  XORLW  01
020A:  BZ    021E
020C:  XORLW  07
020E:  BZ    0222
0210:  XORLW  01
0212:  BZ    0226
0214:  BRA    022A
....................             {  
....................                case 1:  
....................                  go_forward(); 
0216:  BRA    0108
....................                  break; 
0218:  BRA    022A
....................                case 2: 
....................                  go_backward(); 
021A:  BRA    0134
....................                  break; 
021C:  BRA    022A
....................                case 3: 
....................                  turn_right(); 
021E:  BRA    0160
....................                  break; 
0220:  BRA    022A
....................                case 4: 
....................                  turn_left(); 
0222:  BRA    017E
....................                  break; 
0224:  BRA    022A
....................                case 5: 
....................                  stop();                             
0226:  RCALL  00F4
....................                  break; 
0228:  BRA    022A
....................                default :  
....................                   break; 
....................             } 
....................          } 
....................       } 
....................  
022A:  BCF    F9E.3
022C:  GOTO   0054
.................... } 
....................  
.................... void main() 
0230:  CLRF   FF8
0232:  BCF    FD0.7
0234:  BSF    07.7
0236:  BSF    F94.3
0238:  BSF    F94.4
023A:  MOVLW  14
023C:  MOVWF  FC8
023E:  MOVLW  36
0240:  MOVWF  FC6
0242:  BSF    FC5.0
0244:  MOVLW  03
0246:  MOVWF  1A
0248:  BSF    FC1.0
024A:  BSF    FC1.1
024C:  BSF    FC1.2
024E:  BCF    FC1.3
.................... { 
....................    setup_timer_2(T2_DIV_BY_16,255,1);      //4.0 ms overflow, 4.0 ms interrupt 
0250:  MOVLW  00
0252:  IORLW  06
0254:  MOVWF  FCA
0256:  MOVLW  FF
0258:  MOVWF  FCB
....................  
....................    setup_ccp1(CCP_PWM); 
025A:  BCF    F94.2
025C:  BCF    F8B.2
025E:  MOVLW  0C
0260:  MOVWF  FBD
....................    setup_ccp2(CCP_PWM); 
0262:  BCF    F94.1
0264:  BCF    F8B.1
0266:  MOVWF  FBA
....................    set_pwm1_duty((int16)1021); 
0268:  SETF   FBE
026A:  MOVF   FBD,W
026C:  ANDLW  CF
026E:  IORLW  10
0270:  MOVWF  FBD
....................    set_pwm2_duty((int16)1021); 
0272:  SETF   FBB
0274:  MOVF   FBA,W
0276:  ANDLW  CF
0278:  IORLW  10
027A:  MOVWF  FBA
....................  
....................    enable_interrupts(INT_SSP); 
027C:  BSF    F9D.3
....................    enable_interrupts(GLOBAL); 
027E:  MOVLW  C0
0280:  IORWF  FF2,F
....................     
....................    SET_TRIS_B(0); 
0282:  MOVLW  00
0284:  MOVWF  F93
....................  
....................    delay_ms(2000);  
0286:  MOVLW  08
0288:  MOVWF  1B
028A:  CLRF   16
028C:  BTFSC  FF2.7
028E:  BSF    16.7
0290:  BCF    FF2.7
0292:  MOVLW  FA
0294:  MOVWF  1E
0296:  RCALL  00AE
0298:  BTFSC  16.7
029A:  BSF    FF2.7
029C:  DECFSZ 1B,F
029E:  BRA    028A
....................     
....................    while(TRUE) 
....................    { 
....................       delay_ms(1000);     
02A0:  MOVLW  04
02A2:  MOVWF  1B
02A4:  CLRF   16
02A6:  BTFSC  FF2.7
02A8:  BSF    16.7
02AA:  BCF    FF2.7
02AC:  MOVLW  FA
02AE:  MOVWF  1E
02B0:  RCALL  00AE
02B2:  BTFSC  16.7
02B4:  BSF    FF2.7
02B6:  DECFSZ 1B,F
02B8:  BRA    02A4
02BA:  BRA    02A0
....................    } 
....................  
.................... } 
....................  
02BC:  SLEEP 
.................... void show(void)      //light led 
.................... { 
....................       OUTPUT_HIGH(LED); 
*
00D6:  MOVLW  E0
00D8:  MOVWF  F93
00DA:  BSF    F8A.4
....................       delay_ms(3000); 
00DC:  MOVLW  0C
00DE:  MOVWF  1D
00E0:  MOVLW  FA
00E2:  MOVWF  1E
00E4:  RCALL  00AE
00E6:  DECFSZ 1D,F
00E8:  BRA    00E0
....................       OUTPUT_LOW(LED); 
00EA:  MOVLW  E0
00EC:  MOVWF  F93
00EE:  BCF    F8A.4
00F0:  GOTO   01F6 (RETURN)
.................... } 
....................  
.................... void go_forward()      //forward 
.................... { 
....................       OUTPUT_LOW(MotorLeft1); 
*
0108:  MOVLW  E0
010A:  MOVWF  F93
010C:  BCF    F8A.0
....................       OUTPUT_HIGH(MotorLeft2); 
010E:  MOVWF  F93
0110:  BSF    F8A.1
....................       OUTPUT_HIGH(MotorRight1); 
0112:  MOVWF  F93
0114:  BSF    F8A.2
....................       OUTPUT_LOW(MotorRight2);    
0116:  MOVWF  F93
0118:  BCF    F8A.3
....................        
....................       if(buffer[0] == 't'){ 
011A:  MOVF   17,W
011C:  SUBLW  74
011E:  BNZ   0130
....................          delay_ms(500); 
0120:  MOVLW  02
0122:  MOVWF  1D
0124:  MOVLW  FA
0126:  MOVWF  1E
0128:  RCALL  00AE
012A:  DECFSZ 1D,F
012C:  BRA    0124
....................          stop(); 
012E:  RCALL  00F4
....................       } 
0130:  GOTO   022A (RETURN)
.................... } 
....................  
.................... void go_backward()      //reverse 
.................... { 
....................       OUTPUT_HIGH(MotorLeft1); 
0134:  MOVLW  E0
0136:  MOVWF  F93
0138:  BSF    F8A.0
....................       OUTPUT_LOW(MotorLeft2); 
013A:  MOVWF  F93
013C:  BCF    F8A.1
....................       OUTPUT_LOW(MotorRight1); 
013E:  MOVWF  F93
0140:  BCF    F8A.2
....................       OUTPUT_HIGH(MotorRight2);  
0142:  MOVWF  F93
0144:  BSF    F8A.3
....................        
....................       if(buffer[0] == 't'){ 
0146:  MOVF   17,W
0148:  SUBLW  74
014A:  BNZ   015C
....................          delay_ms(500); 
014C:  MOVLW  02
014E:  MOVWF  1D
0150:  MOVLW  FA
0152:  MOVWF  1E
0154:  RCALL  00AE
0156:  DECFSZ 1D,F
0158:  BRA    0150
....................          stop(); 
015A:  RCALL  00F4
....................       } 
015C:  GOTO   022A (RETURN)
.................... } 
....................  
.................... void stop()      //stop - not meaningful for test? 
.................... { 
....................       OUTPUT_HIGH(MotorLeft1); 
*
00F4:  MOVLW  E0
00F6:  MOVWF  F93
00F8:  BSF    F8A.0
....................       OUTPUT_HIGH(MotorLeft2); 
00FA:  MOVWF  F93
00FC:  BSF    F8A.1
....................       OUTPUT_HIGH(MotorRight1); 
00FE:  MOVWF  F93
0100:  BSF    F8A.2
....................       OUTPUT_HIGH(MotorRight2);  
0102:  MOVWF  F93
0104:  BSF    F8A.3
0106:  RETURN 0
.................... } 
....................  
.................... void turn_right()      //turn right using 2 wheels (by 90 degree) 
.................... { 
....................       OUTPUT_LOW(MotorLeft1); 
*
0160:  MOVLW  E0
0162:  MOVWF  F93
0164:  BCF    F8A.0
....................       OUTPUT_HIGH(MotorLeft2); 
0166:  MOVWF  F93
0168:  BSF    F8A.1
....................       OUTPUT_LOW(MotorRight1); 
016A:  MOVWF  F93
016C:  BCF    F8A.2
....................       OUTPUT_HIGH(MotorRight2); 
016E:  MOVWF  F93
0170:  BSF    F8A.3
....................        
....................       delay_ms(200); 
0172:  MOVLW  C8
0174:  MOVWF  1E
0176:  RCALL  00AE
....................        
....................       stop(); 
0178:  RCALL  00F4
017A:  GOTO   022A (RETURN)
.................... } 
....................  
.................... void turn_left()      //turn left using 2 wheels (by 90 degree) 
.................... { 
....................       OUTPUT_HIGH(MotorLeft1); 
017E:  MOVLW  E0
0180:  MOVWF  F93
0182:  BSF    F8A.0
....................       OUTPUT_LOW(MotorLeft2); 
0184:  MOVWF  F93
0186:  BCF    F8A.1
....................       OUTPUT_HIGH(MotorRight1); 
0188:  MOVWF  F93
018A:  BSF    F8A.2
....................       OUTPUT_LOW(MotorRight2);  
018C:  MOVWF  F93
018E:  BCF    F8A.3
....................        
....................       delay_ms(200); 
0190:  MOVLW  C8
0192:  MOVWF  1E
0194:  RCALL  00AE
....................        
....................       stop(); 
0196:  RCALL  00F4
0198:  GOTO   022A (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
