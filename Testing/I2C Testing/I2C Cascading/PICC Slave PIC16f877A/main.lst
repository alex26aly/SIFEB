CCS PCM C Compiler, Version 5.008, 5967               06-Aug-14 09:59

               Filename:   D:\Projects\SIFEB\Testing\Master to Slave Communication\PICC Slave PIC16f877A\main.lst

               ROM used:   384 words (5%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           26 (7%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   132
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.3
001A:  GOTO   01D
001B:  BTFSC  0C.3
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
....................  
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
*
00A4:  DATA F6,30
00A5:  DATA EC,3A
00A6:  DATA 65,10
00A7:  DATA E9,39
00A8:  DATA A0,12
00A9:  DATA 73,05
00AA:  DATA 00,00
*
00C1:  MOVF   0B,W
00C2:  MOVWF  2F
00C3:  BCF    0B.7
00C4:  BSF    03.5
00C5:  BSF    03.6
00C6:  BSF    0C.7
00C7:  BSF    0C.0
00C8:  NOP
00C9:  NOP
00CA:  BTFSC  03.0
00CB:  GOTO   0F4
00CC:  BCF    03.5
00CD:  MOVF   0C,W
00CE:  ANDLW  7F
00CF:  BCF    03.6
00D0:  MOVWF  30
00D1:  BSF    03.6
00D2:  MOVF   0D,W
00D3:  BCF    03.6
00D4:  MOVWF  31
00D5:  BSF    03.6
00D6:  MOVF   0F,W
00D7:  BCF    03.6
00D8:  MOVWF  32
00D9:  MOVF   30,W
00DA:  BTFSS  0C.4
00DB:  GOTO   0DA
00DC:  MOVWF  19
00DD:  MOVF   31,W
00DE:  BSF    03.6
00DF:  MOVWF  0D
00E0:  BCF    03.6
00E1:  MOVF   32,W
00E2:  BSF    03.6
00E3:  MOVWF  0F
00E4:  BSF    03.5
00E5:  BSF    0C.7
00E6:  BSF    0C.0
00E7:  NOP
00E8:  NOP
00E9:  BCF    03.5
00EA:  BCF    03.6
00EB:  DECFSZ 2E,F
00EC:  GOTO   0EE
00ED:  GOTO   0F1
00EE:  BSF    03.5
00EF:  BSF    03.6
00F0:  GOTO   0F4
00F1:  GOTO   114
00F2:  BSF    03.5
00F3:  BSF    03.6
00F4:  BCF    03.5
00F5:  RLF    0C,W
00F6:  RLF    0E,W
00F7:  ANDLW  7F
00F8:  BCF    03.6
00F9:  MOVWF  30
00FA:  BSF    03.6
00FB:  MOVF   0D,W
00FC:  BCF    03.6
00FD:  MOVWF  31
00FE:  BSF    03.6
00FF:  MOVF   0F,W
0100:  BCF    03.6
0101:  MOVWF  32
0102:  MOVF   30,W
0103:  BTFSS  0C.4
0104:  GOTO   103
0105:  MOVWF  19
0106:  MOVF   31,W
0107:  BSF    03.6
0108:  MOVWF  0D
0109:  BCF    03.6
010A:  MOVF   32,W
010B:  BSF    03.6
010C:  MOVWF  0F
010D:  INCF   0D,F
010E:  BTFSC  03.2
010F:  INCF   0F,F
0110:  BCF    03.0
0111:  BCF    03.6
0112:  DECFSZ 2E,F
0113:  GOTO   0C4
0114:  BTFSC  2F.7
0115:  BSF    0B.7
0116:  BCF    0A.3
0117:  BCF    0A.4
0118:  GOTO   175 (RETURN)
0119:  MOVF   00,F
011A:  BTFSC  03.2
011B:  GOTO   12F
011C:  CLRF   2F
011D:  MOVF   04,W
011E:  MOVWF  2E
011F:  BCF    2F.0
0120:  BTFSC  03.7
0121:  BSF    2F.0
0122:  MOVF   00,W
0123:  BTFSS  0C.4
0124:  GOTO   123
0125:  MOVWF  19
0126:  MOVF   2E,W
0127:  MOVWF  04
0128:  BCF    03.7
0129:  BTFSC  2F.0
012A:  BSF    03.7
012B:  INCF   04,F
012C:  BTFSC  03.2
012D:  INCF   05,F
012E:  GOTO   119
012F:  BCF    0A.3
0130:  BCF    0A.4
0131:  GOTO   179 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=8000000) 
*
00AB:  MOVLW  2F
00AC:  MOVWF  04
00AD:  BCF    03.7
00AE:  MOVF   00,W
00AF:  BTFSC  03.2
00B0:  GOTO   0BE
00B1:  MOVLW  02
00B2:  MOVWF  78
00B3:  CLRF   77
00B4:  DECFSZ 77,F
00B5:  GOTO   0B4
00B6:  DECFSZ 78,F
00B7:  GOTO   0B3
00B8:  MOVLW  97
00B9:  MOVWF  77
00BA:  DECFSZ 77,F
00BB:  GOTO   0BA
00BC:  DECFSZ 00,F
00BD:  GOTO   0B1
00BE:  BCF    0A.3
00BF:  BCF    0A.4
00C0:  GOTO   169 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
.................... #use i2c(Slave,Slow,sda=PIN_C4,scl=PIN_C3,force_hw,address=0x16) 
*
0052:  MOVF   33,W
0053:  MOVWF  13
0054:  BSF    14.4
0055:  BCF    0C.3
0056:  BSF    03.5
0057:  BTFSC  14.0
0058:  GOTO   057
0059:  CLRF   78
005A:  BCF    03.5
005B:  BTFSC  14.4
005C:  INCF   78,F
....................  
....................  
....................  
.................... char buffer[3]; 
.................... int8 state;  
.................... int addReceived = 0; 
.................... #byte SSPADD = 0x93 
.................... #INT_SSP 
....................  
.................... void  SSP_isr(VOID)  
.................... { 
....................    state = i2c_isr_state (); 
*
0031:  BSF    03.5
0032:  BTFSC  14.5
0033:  GOTO   03C
0034:  BCF    03.5
0035:  CLRF   2D
0036:  BSF    03.5
0037:  BTFSS  14.2
0038:  GOTO   03C
0039:  BCF    03.5
003A:  BSF    2D.7
003B:  BSF    03.5
003C:  BCF    03.5
003D:  MOVF   2D,W
003E:  INCF   2D,F
003F:  MOVWF  2B
....................  
....................    IF ( (state == 0) || (state == 0x80)) 
0040:  MOVF   2B,F
0041:  BTFSC  03.2
0042:  GOTO   047
0043:  MOVF   2B,W
0044:  SUBLW  80
0045:  BTFSS  03.2
0046:  GOTO   04C
....................    i2c_read () ; 
0047:  BCF    14.6
0048:  BTFSS  0C.3
0049:  GOTO   048
004A:  MOVF   13,W
004B:  BSF    14.4
....................  
....................    IF (state >= 0x80) 
004C:  MOVF   2B,W
004D:  SUBLW  7F
004E:  BTFSC  03.0
004F:  GOTO   05E
....................       i2c_write (buffer[0]) ; 
0050:  MOVF   28,W
0051:  MOVWF  33
*
005D:  GOTO   0A0
....................  
....................    else IF (state > 0) 
005E:  MOVF   2B,F
005F:  BTFSC  03.2
0060:  GOTO   0A0
....................    { 
....................       buffer[state - 1] = i2c_read (); 
0061:  MOVLW  01
0062:  SUBWF  2B,W
0063:  ADDLW  28
0064:  MOVWF  04
0065:  BCF    03.7
0066:  BCF    14.6
0067:  BTFSS  0C.3
0068:  GOTO   067
0069:  MOVF   13,W
006A:  BSF    14.4
006B:  MOVWF  00
....................  
....................       IF (buffer[state - 1] == 'H') 
006C:  MOVLW  01
006D:  SUBWF  2B,W
006E:  ADDLW  28
006F:  MOVWF  04
0070:  BCF    03.7
0071:  MOVF   00,W
0072:  SUBLW  48
0073:  BTFSS  03.2
0074:  GOTO   07A
....................       { 
....................          output_high (PIN_A0) ; 
0075:  BSF    03.5
0076:  BCF    05.0
0077:  BCF    03.5
0078:  BSF    05.0
....................       } 
0079:  GOTO   0A0
....................  
....................       ELSE IF (buffer[state - 1] == 'L') 
007A:  MOVLW  01
007B:  SUBWF  2B,W
007C:  ADDLW  28
007D:  MOVWF  04
007E:  BCF    03.7
007F:  MOVF   00,W
0080:  SUBLW  4C
0081:  BTFSS  03.2
0082:  GOTO   088
....................       { 
....................          output_low (PIN_A0) ; 
0083:  BSF    03.5
0084:  BCF    05.0
0085:  BCF    03.5
0086:  BCF    05.0
....................       } 
0087:  GOTO   0A0
....................        
....................       ELSE IF (buffer[state - 1] == 'C') 
0088:  MOVLW  01
0089:  SUBWF  2B,W
008A:  ADDLW  28
008B:  MOVWF  04
008C:  BCF    03.7
008D:  MOVF   00,W
008E:  SUBLW  43
008F:  BTFSS  03.2
0090:  GOTO   094
....................       { 
....................          addReceived = 1; 
0091:  MOVLW  01
0092:  MOVWF  2C
....................       }       
0093:  GOTO   0A0
....................        
....................       ELSE IF(addReceived == 1) 
0094:  DECFSZ 2C,W
0095:  GOTO   0A0
....................       { 
....................          SSPADD = buffer[state - 1]; 
0096:  MOVLW  01
0097:  SUBWF  2B,W
0098:  ADDLW  28
0099:  MOVWF  04
009A:  BCF    03.7
009B:  MOVF   00,W
009C:  BSF    03.5
009D:  MOVWF  13
....................          addReceived = 0; 
009E:  BCF    03.5
009F:  CLRF   2C
....................       } 
....................    } 
00A0:  BCF    0C.3
00A1:  BCF    0A.3
00A2:  BCF    0A.4
00A3:  GOTO   01D
.................... } 
....................  
.................... void main() 
*
0132:  MOVF   03,W
0133:  ANDLW  1F
0134:  MOVWF  03
0135:  MOVLW  0C
0136:  BSF    03.5
0137:  MOVWF  19
0138:  MOVLW  A2
0139:  MOVWF  18
013A:  MOVLW  90
013B:  BCF    03.5
013C:  MOVWF  18
013D:  MOVLW  FF
013E:  MOVWF  27
013F:  BSF    27.3
0140:  MOVF   27,W
0141:  BSF    03.5
0142:  MOVWF  07
0143:  BCF    03.5
0144:  BSF    27.4
0145:  MOVF   27,W
0146:  BSF    03.5
0147:  MOVWF  07
0148:  MOVLW  16
0149:  MOVWF  13
014A:  MOVLW  36
014B:  BCF    03.5
014C:  MOVWF  14
014D:  BSF    03.5
014E:  BSF    11.0
014F:  BCF    03.5
0150:  CLRF   2C
0151:  MOVLW  03
0152:  MOVWF  2D
0153:  BSF    03.5
0154:  BSF    1F.0
0155:  BSF    1F.1
0156:  BSF    1F.2
0157:  BCF    1F.3
0158:  MOVLW  07
0159:  MOVWF  1C
015A:  BCF    03.7
.................... { 
....................    enable_interrupts (INT_SSP) ; 
015B:  BSF    0C.3
....................    enable_interrupts (GLOBAL) ; 
015C:  MOVLW  C0
015D:  BCF    03.5
015E:  IORWF  0B,F
....................    SET_TRIS_D (0) ; 
015F:  MOVLW  00
0160:  BSF    03.5
0161:  MOVWF  08
....................    SET_TRIS_A (0) ; 
0162:  MOVWF  05
....................  
....................    WHILE (TRUE) 
....................    { 
....................       delay_ms (1000) ; 
0163:  MOVLW  04
0164:  BCF    03.5
0165:  MOVWF  2E
0166:  MOVLW  FA
0167:  MOVWF  2F
0168:  GOTO   0AB
0169:  DECFSZ 2E,F
016A:  GOTO   166
....................       printf ("value is %s\n", buffer); 
016B:  MOVLW  A4
016C:  BSF    03.6
016D:  MOVWF  0D
016E:  MOVLW  00
016F:  MOVWF  0F
0170:  BCF    03.0
0171:  MOVLW  09
0172:  BCF    03.6
0173:  MOVWF  2E
0174:  GOTO   0C1
0175:  MOVLW  28
0176:  MOVWF  04
0177:  BCF    03.7
0178:  GOTO   119
0179:  MOVLW  0A
017A:  BTFSS  0C.4
017B:  GOTO   17A
017C:  MOVWF  19
017D:  BSF    03.5
017E:  GOTO   163
....................    } 
.................... } 
....................  
017F:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
