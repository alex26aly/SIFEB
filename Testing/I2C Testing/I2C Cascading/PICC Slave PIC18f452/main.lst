CCS PCH C Compiler, Version 5.008, 5967               06-Aug-14 09:02

               Filename:   D:\Projects\SIFEB\Testing\Master to Slave Communication\PICC Slave PIC18f452\main.lst

               ROM used:   548 bytes (2%)
                           Largest free fragment is 32216
               RAM used:   28 (2%) at main() level
                           32 (2%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   01B4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.3
004A:  GOTO   0054
004E:  BTFSC  F9E.3
0050:  GOTO   00AE
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
*
0106:  DATA 68,65
0108:  DATA 6C,6C
010A:  DATA 6F,0A
010C:  DATA 00,00
010E:  DATA 76,61
0110:  DATA 6C,75
0112:  DATA 65,20
0114:  DATA 69,73
0116:  DATA 20,25
0118:  DATA 73,0A
011A:  DATA 00,00
011C:  TBLRD*+
011E:  MOVF   FF5,F
0120:  BZ    013C
0122:  MOVFF  FF6,1B
0126:  MOVFF  FF7,1C
012A:  MOVF   FF5,W
012C:  BTFSS  F9E.4
012E:  BRA    012C
0130:  MOVWF  FAD
0132:  MOVFF  1B,FF6
0136:  MOVFF  1C,FF7
013A:  BRA    011C
013C:  GOTO   01F8 (RETURN)
*
016A:  TBLRD*+
016C:  MOVFF  FF6,1C
0170:  MOVFF  FF7,1D
0174:  MOVF   FF5,W
0176:  BTFSS  F9E.4
0178:  BRA    0176
017A:  MOVWF  FAD
017C:  MOVFF  1C,FF6
0180:  MOVFF  1D,FF7
0184:  DECFSZ 1B,F
0186:  BRA    016A
0188:  GOTO   0214 (RETURN)
018C:  MOVF   FEF,F
018E:  BZ    01B0
0190:  MOVFF  FEA,1C
0194:  MOVFF  FE9,1B
0198:  MOVF   FEF,W
019A:  BTFSS  F9E.4
019C:  BRA    019A
019E:  MOVWF  FAD
01A0:  MOVFF  1C,FEA
01A4:  MOVFF  1B,FE9
01A8:  INCF   FE9,F
01AA:  BTFSC  FD8.2
01AC:  INCF   FEA,F
01AE:  BRA    018C
01B0:  GOTO   021C (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
*
0140:  CLRF   FEA
0142:  MOVLW  1C
0144:  MOVWF  FE9
0146:  MOVF   FEF,W
0148:  BZ    0166
014A:  MOVLW  01
014C:  MOVWF  01
014E:  CLRF   00
0150:  DECFSZ 00,F
0152:  BRA    0150
0154:  DECFSZ 01,F
0156:  BRA    014E
0158:  MOVLW  4A
015A:  MOVWF  00
015C:  DECFSZ 00,F
015E:  BRA    015C
0160:  BRA    0162
0162:  DECFSZ FEF,F
0164:  BRA    014A
0166:  GOTO   0202 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
.................... #use i2c(Slave,Slow,sda=PIN_C4,scl=PIN_C3,force_hw,address=0x14) 
*
0096:  MOVF   FC9,W
0098:  MOVFF  1E,FC9
009C:  BSF    FC6.4
009E:  BCF    F9E.3
00A0:  BTFSC  FC7.0
00A2:  BRA    00A0
00A4:  CLRF   01
00A6:  BTFSC  FC6.4
00A8:  INCF   01,F
00AA:  GOTO   0100 (RETURN)
....................  
....................  
.................... char buffer[3]; 
.................... int8 state;  
....................  
.................... #INT_SSP 
.................... void  SSP_isr(void)  
.................... { 
....................  
....................       state = i2c_isr_state(); 
00AE:  BTFSC  FC7.5
00B0:  BRA    00B8
00B2:  CLRF   1A
00B4:  BTFSC  FC7.2
00B6:  BSF    1A.7
00B8:  MOVF   1A,W
00BA:  INCF   1A,F
00BC:  MOVWF  19
....................  
....................       if((state== 0 ) || (state== 0x80)) 
00BE:  MOVF   19,F
00C0:  BZ    00C8
00C2:  MOVF   19,W
00C4:  SUBLW  80
00C6:  BNZ   00D2
....................  
....................         i2c_read(); 
00C8:  BCF    FC6.6
00CA:  BTFSS  F9E.3
00CC:  BRA    00CA
00CE:  MOVF   FC9,W
00D0:  BSF    FC6.4
....................  
....................       if(state >= 0x80) 
00D2:  MOVF   19,W
00D4:  SUBLW  7F
00D6:  BC    00E0
....................  
....................          i2c_write(buffer[0]); 
00D8:  MOVFF  16,1E
00DC:  BRA    0096
00DE:  BRA    0100
....................  
....................       else if(state > 0) 
00E0:  MOVF   19,F
00E2:  BZ    0100
....................  
....................          buffer[state - 1] = i2c_read(); 
00E4:  MOVLW  01
00E6:  SUBWF  19,W
00E8:  CLRF   03
00EA:  ADDLW  16
00EC:  MOVWF  FE9
00EE:  MOVLW  00
00F0:  ADDWFC 03,W
00F2:  MOVWF  FEA
00F4:  BCF    FC6.6
00F6:  BTFSS  F9E.3
00F8:  BRA    00F6
00FA:  MOVF   FC9,W
00FC:  BSF    FC6.4
00FE:  MOVWF  FEF
....................          /* 
....................          if(buffer[state - 1] == 'H') 
....................          { 
....................             output_high(PIN_A0); 
....................          } 
....................          if(buffer[state - 1] == 'L') 
....................          { 
....................             output_low(PIN_A0); 
....................          } 
....................          */ 
....................  
0100:  BCF    F9E.3
0102:  GOTO   0054
.................... } 
....................  
.................... void main() 
*
01B4:  CLRF   FF8
01B6:  BCF    FD0.7
01B8:  BSF    07.7
01BA:  MOVLW  19
01BC:  MOVWF  FAF
01BE:  MOVLW  A6
01C0:  MOVWF  FAC
01C2:  MOVLW  90
01C4:  MOVWF  FAB
01C6:  BSF    F94.3
01C8:  BSF    F94.4
01CA:  MOVLW  14
01CC:  MOVWF  FC8
01CE:  MOVLW  36
01D0:  MOVWF  FC6
01D2:  BSF    FC5.0
01D4:  MOVLW  03
01D6:  MOVWF  1A
01D8:  BSF    FC1.0
01DA:  BSF    FC1.1
01DC:  BSF    FC1.2
01DE:  BCF    FC1.3
.................... { 
....................  
....................    enable_interrupts(INT_SSP); 
01E0:  BSF    F9D.3
....................    enable_interrupts(GLOBAL); 
01E2:  MOVLW  C0
01E4:  IORWF  FF2,F
....................    SET_TRIS_D(0); 
01E6:  MOVLW  00
01E8:  MOVWF  F95
....................    SET_TRIS_A(0); 
01EA:  MOVWF  F92
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
01EC:  CLRF   FB1
....................     
.................... while(true) 
.................... { 
....................    printf("hello\n"); 
01EE:  MOVLW  06
01F0:  MOVWF  FF6
01F2:  MOVLW  01
01F4:  MOVWF  FF7
01F6:  BRA    011C
....................    delay_ms(1000); 
01F8:  MOVLW  04
01FA:  MOVWF  1B
01FC:  MOVLW  FA
01FE:  MOVWF  1C
0200:  BRA    0140
0202:  DECFSZ 1B,F
0204:  BRA    01FC
....................    printf("value is %s\n",buffer); 
0206:  MOVLW  0E
0208:  MOVWF  FF6
020A:  MOVLW  01
020C:  MOVWF  FF7
020E:  MOVLW  09
0210:  MOVWF  1B
0212:  BRA    016A
0214:  CLRF   FEA
0216:  MOVLW  16
0218:  MOVWF  FE9
021A:  BRA    018C
021C:  MOVLW  0A
021E:  BTFSS  F9E.4
0220:  BRA    021E
0222:  MOVWF  FAD
0224:  BRA    01EE
.................... } 
....................  
....................     
....................  
.................... } 
0226:  SLEEP 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
